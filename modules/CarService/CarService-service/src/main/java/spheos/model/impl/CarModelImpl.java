/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package spheos.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import spheos.model.Car;
import spheos.model.CarModel;

/**
 * The base model implementation for the Car service. Represents a row in the &quot;CAR_Car&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CarModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CarImpl
 * @generated
 */
public class CarModelImpl extends BaseModelImpl<Car> implements CarModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a car model instance should use the <code>Car</code> interface instead.
	 */
	public static final String TABLE_NAME = "CAR_Car";

	public static final Object[][] TABLE_COLUMNS = {
		{"carId", Types.BIGINT}, {"brand", Types.VARCHAR},
		{"modell", Types.VARCHAR}, {"year", Types.INTEGER},
		{"color", Types.VARCHAR}, {"price", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("carId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CAR_Car (carId LONG not null primary key,brand VARCHAR(75) null,modell VARCHAR(75) null,year INTEGER,color VARCHAR(75) null,price DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table CAR_Car";

	public static final String ORDER_BY_JPQL = " ORDER BY car.carId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY CAR_Car.carId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CARID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _carId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _carId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Car.class;
	}

	@Override
	public String getModelClassName() {
		return Car.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Car, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Car, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Car, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Car)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Car, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Car, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Car)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Car, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Car, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Car, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Car, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Car, Object>>();

			attributeGetterFunctions.put("carId", Car::getCarId);
			attributeGetterFunctions.put("brand", Car::getBrand);
			attributeGetterFunctions.put("modell", Car::getModell);
			attributeGetterFunctions.put("year", Car::getYear);
			attributeGetterFunctions.put("color", Car::getColor);
			attributeGetterFunctions.put("price", Car::getPrice);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Car, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Car, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Car, ?>>();

			attributeSetterBiConsumers.put(
				"carId", (BiConsumer<Car, Long>)Car::setCarId);
			attributeSetterBiConsumers.put(
				"brand", (BiConsumer<Car, String>)Car::setBrand);
			attributeSetterBiConsumers.put(
				"modell", (BiConsumer<Car, String>)Car::setModell);
			attributeSetterBiConsumers.put(
				"year", (BiConsumer<Car, Integer>)Car::setYear);
			attributeSetterBiConsumers.put(
				"color", (BiConsumer<Car, String>)Car::setColor);
			attributeSetterBiConsumers.put(
				"price", (BiConsumer<Car, Double>)Car::setPrice);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getCarId() {
		return _carId;
	}

	@Override
	public void setCarId(long carId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carId = carId;
	}

	@Override
	public String getBrand() {
		if (_brand == null) {
			return "";
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brand = brand;
	}

	@Override
	public String getModell() {
		if (_modell == null) {
			return "";
		}
		else {
			return _modell;
		}
	}

	@Override
	public void setModell(String modell) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modell = modell;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Car.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Car toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Car> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CarImpl carImpl = new CarImpl();

		carImpl.setCarId(getCarId());
		carImpl.setBrand(getBrand());
		carImpl.setModell(getModell());
		carImpl.setYear(getYear());
		carImpl.setColor(getColor());
		carImpl.setPrice(getPrice());

		carImpl.resetOriginalValues();

		return carImpl;
	}

	@Override
	public Car cloneWithOriginalValues() {
		CarImpl carImpl = new CarImpl();

		carImpl.setCarId(this.<Long>getColumnOriginalValue("carId"));
		carImpl.setBrand(this.<String>getColumnOriginalValue("brand"));
		carImpl.setModell(this.<String>getColumnOriginalValue("modell"));
		carImpl.setYear(this.<Integer>getColumnOriginalValue("year"));
		carImpl.setColor(this.<String>getColumnOriginalValue("color"));
		carImpl.setPrice(this.<Double>getColumnOriginalValue("price"));

		return carImpl;
	}

	@Override
	public int compareTo(Car car) {
		long primaryKey = car.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Car)) {
			return false;
		}

		Car car = (Car)object;

		long primaryKey = car.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Car> toCacheModel() {
		CarCacheModel carCacheModel = new CarCacheModel();

		carCacheModel.carId = getCarId();

		carCacheModel.brand = getBrand();

		String brand = carCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			carCacheModel.brand = null;
		}

		carCacheModel.modell = getModell();

		String modell = carCacheModel.modell;

		if ((modell != null) && (modell.length() == 0)) {
			carCacheModel.modell = null;
		}

		carCacheModel.year = getYear();

		carCacheModel.color = getColor();

		String color = carCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			carCacheModel.color = null;
		}

		carCacheModel.price = getPrice();

		return carCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Car, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Car, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Car, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Car)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Car>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Car.class, ModelWrapper.class);

	}

	private long _carId;
	private String _brand;
	private String _modell;
	private int _year;
	private String _color;
	private double _price;

	public <T> T getColumnValue(String columnName) {
		Function<Car, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Car)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("carId", _carId);
		_columnOriginalValues.put("brand", _brand);
		_columnOriginalValues.put("modell", _modell);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("color", _color);
		_columnOriginalValues.put("price", _price);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("carId", 1L);

		columnBitmasks.put("brand", 2L);

		columnBitmasks.put("modell", 4L);

		columnBitmasks.put("year", 8L);

		columnBitmasks.put("color", 16L);

		columnBitmasks.put("price", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Car _escapedModel;

}